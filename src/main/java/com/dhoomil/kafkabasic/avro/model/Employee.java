/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dhoomil.kafkabasic.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8626583381145042719L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.dhoomil.kafkabasic.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"fname\",\"type\":\"string\"},{\"name\":\"lname\",\"type\":\"string\"},{\"name\":\"dateOfJoining\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"confirmationStatus\",\"type\":\"boolean\"},{\"name\":\"phoneNums\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"project\",\"type\":{\"type\":\"record\",\"name\":\"Project\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Employee to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Employee from a ByteBuffer. */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence fname;
  @Deprecated public java.lang.CharSequence lname;
  @Deprecated public long dateOfJoining;
  @Deprecated public boolean confirmationStatus;
  @Deprecated public java.util.List<java.lang.CharSequence> phoneNums;
  @Deprecated public com.dhoomil.kafkabasic.avro.model.Project project;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param fname The new value for fname
   * @param lname The new value for lname
   * @param dateOfJoining The new value for dateOfJoining
   * @param confirmationStatus The new value for confirmationStatus
   * @param phoneNums The new value for phoneNums
   * @param project The new value for project
   */
  public Employee(java.lang.Integer id, java.lang.CharSequence fname, java.lang.CharSequence lname, java.lang.Long dateOfJoining, java.lang.Boolean confirmationStatus, java.util.List<java.lang.CharSequence> phoneNums, com.dhoomil.kafkabasic.avro.model.Project project) {
    this.id = id;
    this.fname = fname;
    this.lname = lname;
    this.dateOfJoining = dateOfJoining;
    this.confirmationStatus = confirmationStatus;
    this.phoneNums = phoneNums;
    this.project = project;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return fname;
    case 2: return lname;
    case 3: return dateOfJoining;
    case 4: return confirmationStatus;
    case 5: return phoneNums;
    case 6: return project;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: fname = (java.lang.CharSequence)value$; break;
    case 2: lname = (java.lang.CharSequence)value$; break;
    case 3: dateOfJoining = (java.lang.Long)value$; break;
    case 4: confirmationStatus = (java.lang.Boolean)value$; break;
    case 5: phoneNums = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: project = (com.dhoomil.kafkabasic.avro.model.Project)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fname' field.
   * @return The value of the 'fname' field.
   */
  public java.lang.CharSequence getFname() {
    return fname;
  }

  /**
   * Sets the value of the 'fname' field.
   * @param value the value to set.
   */
  public void setFname(java.lang.CharSequence value) {
    this.fname = value;
  }

  /**
   * Gets the value of the 'lname' field.
   * @return The value of the 'lname' field.
   */
  public java.lang.CharSequence getLname() {
    return lname;
  }

  /**
   * Sets the value of the 'lname' field.
   * @param value the value to set.
   */
  public void setLname(java.lang.CharSequence value) {
    this.lname = value;
  }

  /**
   * Gets the value of the 'dateOfJoining' field.
   * @return The value of the 'dateOfJoining' field.
   */
  public java.lang.Long getDateOfJoining() {
    return dateOfJoining;
  }

  /**
   * Sets the value of the 'dateOfJoining' field.
   * @param value the value to set.
   */
  public void setDateOfJoining(java.lang.Long value) {
    this.dateOfJoining = value;
  }

  /**
   * Gets the value of the 'confirmationStatus' field.
   * @return The value of the 'confirmationStatus' field.
   */
  public java.lang.Boolean getConfirmationStatus() {
    return confirmationStatus;
  }

  /**
   * Sets the value of the 'confirmationStatus' field.
   * @param value the value to set.
   */
  public void setConfirmationStatus(java.lang.Boolean value) {
    this.confirmationStatus = value;
  }

  /**
   * Gets the value of the 'phoneNums' field.
   * @return The value of the 'phoneNums' field.
   */
  public java.util.List<java.lang.CharSequence> getPhoneNums() {
    return phoneNums;
  }

  /**
   * Sets the value of the 'phoneNums' field.
   * @param value the value to set.
   */
  public void setPhoneNums(java.util.List<java.lang.CharSequence> value) {
    this.phoneNums = value;
  }

  /**
   * Gets the value of the 'project' field.
   * @return The value of the 'project' field.
   */
  public com.dhoomil.kafkabasic.avro.model.Project getProject() {
    return project;
  }

  /**
   * Sets the value of the 'project' field.
   * @param value the value to set.
   */
  public void setProject(com.dhoomil.kafkabasic.avro.model.Project value) {
    this.project = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static com.dhoomil.kafkabasic.avro.model.Employee.Builder newBuilder() {
    return new com.dhoomil.kafkabasic.avro.model.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.dhoomil.kafkabasic.avro.model.Employee.Builder newBuilder(com.dhoomil.kafkabasic.avro.model.Employee.Builder other) {
    return new com.dhoomil.kafkabasic.avro.model.Employee.Builder(other);
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.dhoomil.kafkabasic.avro.model.Employee.Builder newBuilder(com.dhoomil.kafkabasic.avro.model.Employee other) {
    return new com.dhoomil.kafkabasic.avro.model.Employee.Builder(other);
  }

  /**
   * RecordBuilder for Employee instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private int id;
    private java.lang.CharSequence fname;
    private java.lang.CharSequence lname;
    private long dateOfJoining;
    private boolean confirmationStatus;
    private java.util.List<java.lang.CharSequence> phoneNums;
    private com.dhoomil.kafkabasic.avro.model.Project project;
    private com.dhoomil.kafkabasic.avro.model.Project.Builder projectBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dhoomil.kafkabasic.avro.model.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fname)) {
        this.fname = data().deepCopy(fields()[1].schema(), other.fname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lname)) {
        this.lname = data().deepCopy(fields()[2].schema(), other.lname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dateOfJoining)) {
        this.dateOfJoining = data().deepCopy(fields()[3].schema(), other.dateOfJoining);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.confirmationStatus)) {
        this.confirmationStatus = data().deepCopy(fields()[4].schema(), other.confirmationStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phoneNums)) {
        this.phoneNums = data().deepCopy(fields()[5].schema(), other.phoneNums);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.project)) {
        this.project = data().deepCopy(fields()[6].schema(), other.project);
        fieldSetFlags()[6] = true;
      }
      if (other.hasProjectBuilder()) {
        this.projectBuilder = com.dhoomil.kafkabasic.avro.model.Project.newBuilder(other.getProjectBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dhoomil.kafkabasic.avro.model.Employee other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fname)) {
        this.fname = data().deepCopy(fields()[1].schema(), other.fname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lname)) {
        this.lname = data().deepCopy(fields()[2].schema(), other.lname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dateOfJoining)) {
        this.dateOfJoining = data().deepCopy(fields()[3].schema(), other.dateOfJoining);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.confirmationStatus)) {
        this.confirmationStatus = data().deepCopy(fields()[4].schema(), other.confirmationStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phoneNums)) {
        this.phoneNums = data().deepCopy(fields()[5].schema(), other.phoneNums);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.project)) {
        this.project = data().deepCopy(fields()[6].schema(), other.project);
        fieldSetFlags()[6] = true;
      }
      this.projectBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fname' field.
      * @return The value.
      */
    public java.lang.CharSequence getFname() {
      return fname;
    }

    /**
      * Sets the value of the 'fname' field.
      * @param value The value of 'fname'.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setFname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fname' field has been set.
      * @return True if the 'fname' field has been set, false otherwise.
      */
    public boolean hasFname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fname' field.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder clearFname() {
      fname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lname' field.
      * @return The value.
      */
    public java.lang.CharSequence getLname() {
      return lname;
    }

    /**
      * Sets the value of the 'lname' field.
      * @param value The value of 'lname'.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setLname(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lname' field has been set.
      * @return True if the 'lname' field has been set, false otherwise.
      */
    public boolean hasLname() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lname' field.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder clearLname() {
      lname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateOfJoining' field.
      * @return The value.
      */
    public java.lang.Long getDateOfJoining() {
      return dateOfJoining;
    }

    /**
      * Sets the value of the 'dateOfJoining' field.
      * @param value The value of 'dateOfJoining'.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setDateOfJoining(long value) {
      validate(fields()[3], value);
      this.dateOfJoining = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dateOfJoining' field has been set.
      * @return True if the 'dateOfJoining' field has been set, false otherwise.
      */
    public boolean hasDateOfJoining() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dateOfJoining' field.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder clearDateOfJoining() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'confirmationStatus' field.
      * @return The value.
      */
    public java.lang.Boolean getConfirmationStatus() {
      return confirmationStatus;
    }

    /**
      * Sets the value of the 'confirmationStatus' field.
      * @param value The value of 'confirmationStatus'.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setConfirmationStatus(boolean value) {
      validate(fields()[4], value);
      this.confirmationStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'confirmationStatus' field has been set.
      * @return True if the 'confirmationStatus' field has been set, false otherwise.
      */
    public boolean hasConfirmationStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'confirmationStatus' field.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder clearConfirmationStatus() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNums' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getPhoneNums() {
      return phoneNums;
    }

    /**
      * Sets the value of the 'phoneNums' field.
      * @param value The value of 'phoneNums'.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setPhoneNums(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.phoneNums = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNums' field has been set.
      * @return True if the 'phoneNums' field has been set, false otherwise.
      */
    public boolean hasPhoneNums() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'phoneNums' field.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder clearPhoneNums() {
      phoneNums = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'project' field.
      * @return The value.
      */
    public com.dhoomil.kafkabasic.avro.model.Project getProject() {
      return project;
    }

    /**
      * Sets the value of the 'project' field.
      * @param value The value of 'project'.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setProject(com.dhoomil.kafkabasic.avro.model.Project value) {
      validate(fields()[6], value);
      this.projectBuilder = null;
      this.project = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'project' field has been set.
      * @return True if the 'project' field has been set, false otherwise.
      */
    public boolean hasProject() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'project' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.dhoomil.kafkabasic.avro.model.Project.Builder getProjectBuilder() {
      if (projectBuilder == null) {
        if (hasProject()) {
          setProjectBuilder(com.dhoomil.kafkabasic.avro.model.Project.newBuilder(project));
        } else {
          setProjectBuilder(com.dhoomil.kafkabasic.avro.model.Project.newBuilder());
        }
      }
      return projectBuilder;
    }

    /**
     * Sets the Builder instance for the 'project' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder setProjectBuilder(com.dhoomil.kafkabasic.avro.model.Project.Builder value) {
      clearProject();
      projectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'project' field has an active Builder instance
     * @return True if the 'project' field has an active Builder instance
     */
    public boolean hasProjectBuilder() {
      return projectBuilder != null;
    }

    /**
      * Clears the value of the 'project' field.
      * @return This builder.
      */
    public com.dhoomil.kafkabasic.avro.model.Employee.Builder clearProject() {
      project = null;
      projectBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.fname = fieldSetFlags()[1] ? this.fname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lname = fieldSetFlags()[2] ? this.lname : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.dateOfJoining = fieldSetFlags()[3] ? this.dateOfJoining : (java.lang.Long) defaultValue(fields()[3]);
        record.confirmationStatus = fieldSetFlags()[4] ? this.confirmationStatus : (java.lang.Boolean) defaultValue(fields()[4]);
        record.phoneNums = fieldSetFlags()[5] ? this.phoneNums : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        if (projectBuilder != null) {
          record.project = this.projectBuilder.build();
        } else {
          record.project = fieldSetFlags()[6] ? this.project : (com.dhoomil.kafkabasic.avro.model.Project) defaultValue(fields()[6]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
